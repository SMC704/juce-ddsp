// @generated by tools/codegen/gen.py from DispatchKeyFunctions.h

// NB: The implementing C++ file is RegisterDispatchKey.cpp

// TODO: tighten this include
#include <ATen/Functions.h>

namespace at {
namespace cuda {

TORCH_API bool _use_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank);
TORCH_API std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity);
TORCH_API Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, bool bidirectional);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
TORCH_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);
TORCH_API Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, TensorOptions options);
TORCH_API Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
TORCH_API std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale);
TORCH_API Tensor & abs_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & abs_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & angle_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & angle_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor view_as_real(const Tensor & self);
TORCH_API Tensor view_as_complex(const Tensor & self);
TORCH_API Tensor & sgn_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sgn_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & conj_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & conj_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & acos_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & acos_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor & add_outf(const Tensor & self, const Tensor & other, Scalar alpha, Tensor & out);
TORCH_API Tensor add(const Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addmv_outf(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor & _addmv_impl_(Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addr_outf(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor all(const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API Tensor & all_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & out);
TORCH_API Tensor any(const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API Tensor & any_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & out);
TORCH_API Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);
TORCH_API Tensor & arange_outf(Scalar start, Scalar end, Scalar step, Tensor & out);
TORCH_API Tensor argmax(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
TORCH_API Tensor & argmax_out(Tensor & out, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
TORCH_API Tensor & argmax_outf(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
TORCH_API Tensor argmin(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
TORCH_API Tensor & argmin_out(Tensor & out, const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);
TORCH_API Tensor & argmin_outf(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out);
TORCH_API Tensor & acosh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & acosh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & asinh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & asinh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & atanh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & atanh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);
TORCH_API Tensor asin(const Tensor & self);
TORCH_API Tensor & asin_(Tensor & self);
TORCH_API Tensor & asin_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & asin_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & atan_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & atan_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & baddbmm_outf(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor & bernoulli_out(Tensor & out, const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & bernoulli_outf(const Tensor & self, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor & bernoulli_(Tensor & self, const Tensor & p, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & bernoulli_(Tensor & self, double p=0.5, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & binary_cross_entropy_outf(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out);
TORCH_API Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & binary_cross_entropy_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input);
TORCH_API Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights={}, int64_t minlength=0);
TORCH_API Tensor & bitwise_not_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & bitwise_not_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor copysign(const Tensor & self, const Tensor & other);
TORCH_API Tensor & copysign_(Tensor & self, const Tensor & other);
TORCH_API Tensor & copysign_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & copysign_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor copysign(const Tensor & self, Scalar other);
TORCH_API Tensor & copysign_(Tensor & self, Scalar other);
TORCH_API Tensor & logical_not_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & logical_not_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & logical_xor_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & logical_and_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & logical_and_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & logical_or_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & logical_or_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor bmm(const Tensor & self, const Tensor & mat2);
TORCH_API Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2);
TORCH_API Tensor & bmm_outf(const Tensor & self, const Tensor & mat2, Tensor & out);
TORCH_API Tensor & ceil_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & ceil_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor clamp(const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);
TORCH_API Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);
TORCH_API Tensor & clamp_outf(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out);
TORCH_API Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max);
TORCH_API Tensor & clamp_max_outf(const Tensor & self, Scalar max, Tensor & out);
TORCH_API Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min);
TORCH_API Tensor & clamp_min_outf(const Tensor & self, Scalar min, Tensor & out);
TORCH_API Tensor & complex_out(Tensor & out, const Tensor & real, const Tensor & imag);
TORCH_API Tensor & complex_outf(const Tensor & real, const Tensor & imag, Tensor & out);
TORCH_API Tensor & polar_out(Tensor & out, const Tensor & abs, const Tensor & angle);
TORCH_API Tensor & polar_outf(const Tensor & abs, const Tensor & angle, Tensor & out);
TORCH_API Tensor & cos_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & cos_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & cosh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & cosh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor count_nonzero(const Tensor & self, IntArrayRef dim);
TORCH_API Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W);
TORCH_API Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
TORCH_API std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace);
TORCH_API Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API std::tuple<Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
TORCH_API Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API std::tuple<Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32, std::array<bool,2> output_mask);
TORCH_API Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, bool allow_tf32);
TORCH_API Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid);
TORCH_API std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output);
TORCH_API void _cummax_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
TORCH_API void _cummin_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim);
TORCH_API std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);
TORCH_API Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity=false);
TORCH_API Tensor div(const Tensor & self, const Tensor & other);
TORCH_API Tensor & div_(Tensor & self, const Tensor & other);
TORCH_API Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & div_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor div(const Tensor & self, const Tensor & other, std::string rounding_mode);
TORCH_API Tensor & div_(Tensor & self, const Tensor & other, std::string rounding_mode);
TORCH_API Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other, std::string rounding_mode);
TORCH_API Tensor & div_outf(const Tensor & self, const Tensor & other, std::string rounding_mode, Tensor & out);
TORCH_API Tensor dot(const Tensor & self, const Tensor & tensor);
TORCH_API Tensor vdot(const Tensor & self, const Tensor & other);
TORCH_API Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
TORCH_API Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const c10::optional<Tensor> & per_sample_weights={}, bool include_last_offset=false);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const c10::optional<Tensor> & per_sample_weights={}, bool include_last_offset=false);
TORCH_API Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights);
TORCH_API Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode);
TORCH_API Tensor empty(IntArrayRef size, TensorOptions options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);
TORCH_API Tensor empty(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format);
TORCH_API Tensor & resize_(Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format=c10::nullopt);
TORCH_API Tensor empty_strided(IntArrayRef size, IntArrayRef stride, TensorOptions options={});
TORCH_API Tensor empty_strided(IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
TORCH_API Tensor & erf_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & erf_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & erfc_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & erfc_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & exp_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & exp_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & exp2_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & exp2_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & expm1_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & expm1_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & eye_out(Tensor & out, int64_t n);
TORCH_API Tensor & eye_outf(int64_t n, Tensor & out);
TORCH_API Tensor & eye_out(Tensor & out, int64_t n, int64_t m);
TORCH_API Tensor & eye_outf(int64_t n, int64_t m, Tensor & out);
TORCH_API Tensor & floor_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & floor_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor floor_divide(const Tensor & self, const Tensor & other);
TORCH_API Tensor & floor_divide_(Tensor & self, const Tensor & other);
TORCH_API Tensor & floor_divide_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & floor_divide_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & frac_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & frac_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & gcd_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & gcd_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & lcm_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & lcm_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
TORCH_API std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
TORCH_API Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
TORCH_API std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask);
TORCH_API Tensor _fft_r2c(const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided);
TORCH_API Tensor & _fft_r2c_out(Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided);
TORCH_API Tensor & _fft_r2c_outf(const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided, Tensor & out);
TORCH_API Tensor _fft_c2r(const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
TORCH_API Tensor & _fft_c2r_out(Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
TORCH_API Tensor & _fft_c2r_outf(const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size, Tensor & out);
TORCH_API Tensor _fft_c2c(const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward);
TORCH_API Tensor & _fft_c2c_out(Tensor & out, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward);
TORCH_API Tensor & _fft_c2c_outf(const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward, Tensor & out);
TORCH_API Tensor index(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices);
TORCH_API Tensor & _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate=false, bool unsafe=false);
TORCH_API Tensor _inverse_helper(const Tensor & self);
TORCH_API Tensor isnan(const Tensor & self);
TORCH_API Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, bool log_target=false);
TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> kthvalue_outf(const Tensor & self, int64_t k, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask);
TORCH_API Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, c10::optional<int64_t> steps=c10::nullopt);
TORCH_API Tensor & linspace_outf(Scalar start, Scalar end, c10::optional<int64_t> steps, Tensor & out);
TORCH_API Tensor & log_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & log_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & log10_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & log10_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor log1p(const Tensor & self);
TORCH_API Tensor & log1p_(Tensor & self);
TORCH_API Tensor & log1p_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & log1p_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & log2_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & log2_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & logaddexp_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & logaddexp_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & logaddexp2_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & logaddexp2_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor xlogy(const Tensor & self, const Tensor & other);
TORCH_API Tensor & xlogy_(Tensor & self, const Tensor & other);
TORCH_API Tensor & xlogy_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & xlogy_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor xlogy(Scalar self, const Tensor & other);
TORCH_API Tensor & xlogy_out(Tensor & out, Scalar self, const Tensor & other);
TORCH_API Tensor & xlogy_outf(Scalar self, const Tensor & other, Tensor & out);
TORCH_API Tensor xlogy(const Tensor & self, Scalar other);
TORCH_API Tensor & xlogy_(Tensor & self, Scalar other);
TORCH_API Tensor & xlogy_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & xlogy_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, c10::optional<int64_t> steps=c10::nullopt, double base=10.0);
TORCH_API Tensor & logspace_outf(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, Tensor & out);
TORCH_API Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float);
TORCH_API Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
TORCH_API Tensor _logcumsumexp(const Tensor & self, int64_t dim);
TORCH_API Tensor & _logcumsumexp_out(Tensor & out, const Tensor & self, int64_t dim);
TORCH_API Tensor & _logcumsumexp_outf(const Tensor & self, int64_t dim, Tensor & out);
TORCH_API Tensor matrix_exp(const Tensor & self);
TORCH_API std::tuple<Tensor,Tensor> _aminmax(const Tensor & self);
TORCH_API std::tuple<Tensor,Tensor> _aminmax(const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API Tensor _compute_linear_combination(const Tensor & input, const Tensor & coefficients);
TORCH_API Tensor & _compute_linear_combination_out(Tensor & out, const Tensor & input, const Tensor & coefficients);
TORCH_API Tensor & _compute_linear_combination_outf(const Tensor & input, const Tensor & coefficients, Tensor & out);
TORCH_API std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> max_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & max, Tensor & max_values);
TORCH_API Tensor & amax_out(Tensor & out, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
TORCH_API Tensor & amax_outf(const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
TORCH_API Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & mean_outf(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
TORCH_API Tensor median(const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> median_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
TORCH_API Tensor nanmedian(const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> nanmedian_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
TORCH_API std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> min_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & min, Tensor & min_indices);
TORCH_API Tensor & amin_out(Tensor & out, const Tensor & self, IntArrayRef dim={}, bool keepdim=false);
TORCH_API Tensor & amin_outf(const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon);
TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon);
TORCH_API Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
TORCH_API Tensor miopen_convolution_backward_bias(const Tensor & grad_output);
TORCH_API Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
TORCH_API Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);
TORCH_API Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state);
TORCH_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);
TORCH_API Tensor mm(const Tensor & self, const Tensor & mat2);
TORCH_API Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2);
TORCH_API Tensor & mm_outf(const Tensor & self, const Tensor & mat2, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim=-1, bool keepdim=false);
TORCH_API Tensor mul(const Tensor & self, const Tensor & other);
TORCH_API Tensor & mul_(Tensor & self, const Tensor & other);
TORCH_API Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & mul_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor mv(const Tensor & self, const Tensor & vec);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out(Tensor & out, Tensor & save_mean, Tensor & save_invstd, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_outf(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd);
TORCH_API std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps);
TORCH_API Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps);
TORCH_API Tensor & batch_norm_elemt_out(Tensor & out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps);
TORCH_API Tensor & batch_norm_elemt_outf(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count);
TORCH_API std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts);
TORCH_API std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask);
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g);
TORCH_API Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu);
TORCH_API std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum);
TORCH_API Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode);
TORCH_API Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);
TORCH_API Tensor _pdist_forward(const Tensor & self, double p=2);
TORCH_API Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);
TORCH_API Tensor & randperm_out(Tensor & out, int64_t n, c10::optional<Generator> generator);
TORCH_API Tensor & randperm_outf(int64_t n, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);
TORCH_API Tensor & range_outf(Scalar start, Scalar end, Scalar step, Tensor & out);
TORCH_API Tensor & reciprocal_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & reciprocal_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & neg_(Tensor & self);
TORCH_API Tensor & neg_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & neg_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor repeat_interleave(const Tensor & repeats);
TORCH_API Tensor & round_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & round_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor relu(const Tensor & self);
TORCH_API Tensor & relu_(Tensor & self);
TORCH_API Tensor prelu(const Tensor & self, const Tensor & weight);
TORCH_API std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight);
TORCH_API Tensor gelu(const Tensor & self);
TORCH_API Tensor gelu_backward(const Tensor & grad, const Tensor & self);
TORCH_API Tensor hardshrink(const Tensor & self, Scalar lambd=0.5);
TORCH_API Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd);
TORCH_API Tensor & rsqrt_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & rsqrt_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & silu_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & silu_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor silu_backward(const Tensor & grad_output, const Tensor & self);
TORCH_API Tensor sigmoid(const Tensor & self);
TORCH_API Tensor & sigmoid_(Tensor & self);
TORCH_API Tensor & sigmoid_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sigmoid_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor logit(const Tensor & self, c10::optional<double> eps=c10::nullopt);
TORCH_API Tensor & logit_(Tensor & self, c10::optional<double> eps=c10::nullopt);
TORCH_API Tensor & logit_out(Tensor & out, const Tensor & self, c10::optional<double> eps=c10::nullopt);
TORCH_API Tensor & logit_outf(const Tensor & self, c10::optional<double> eps, Tensor & out);
TORCH_API Tensor & sin_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sin_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & sinc_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sinc_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & sinh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sinh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float);
TORCH_API Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);
TORCH_API Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & sspaddmm_outf(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & sum_outf(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
TORCH_API Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor nansum(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & nansum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & nansum_outf(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
TORCH_API Tensor sqrt(const Tensor & self);
TORCH_API Tensor & sqrt_(Tensor & self);
TORCH_API Tensor & sqrt_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sqrt_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor std(const Tensor & self, bool unbiased=true);
TORCH_API Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor & std_outf(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased=true);
TORCH_API std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor prod(const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);
TORCH_API Tensor & prod_outf(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out);
TORCH_API Tensor & tan_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & tan_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor tanh(const Tensor & self);
TORCH_API Tensor & tanh_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & tanh_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & tensordot_out(Tensor & out, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);
TORCH_API Tensor & tensordot_outf(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other, Tensor & out);
TORCH_API Tensor threshold(const Tensor & self, Scalar threshold, Scalar value);
TORCH_API Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value);
TORCH_API Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value);
TORCH_API Tensor & threshold_outf(const Tensor & self, Scalar threshold, Scalar value, Tensor & out);
TORCH_API Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold);
TORCH_API Tensor flip(const Tensor & self, IntArrayRef dims);
TORCH_API Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims={});
TORCH_API Tensor & trunc_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & trunc_outf(const Tensor & self, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted=true, bool return_inverse=false);
TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);
TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse=false, bool return_counts=false, c10::optional<int64_t> dim=c10::nullopt);
TORCH_API std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse=false, bool return_counts=false);
TORCH_API std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);
TORCH_API Tensor var(const Tensor & self, bool unbiased=true);
TORCH_API Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor & var_outf(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased=true);
TORCH_API std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);
TORCH_API Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other);
TORCH_API std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim=0);
TORCH_API std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);
TORCH_API Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output);
TORCH_API Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total);
TORCH_API Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor poisson(const Tensor & self, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);
TORCH_API Tensor & norm_outf(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out);
TORCH_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false);
TORCH_API Tensor & norm_outf(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, Tensor & out);
TORCH_API Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format=c10::nullopt);
TORCH_API Tensor & zero_(Tensor & self);
TORCH_API Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor & sub_outf(const Tensor & self, const Tensor & other, Scalar alpha, Tensor & out);
TORCH_API Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha=1);
TORCH_API Tensor & heaviside_out(Tensor & out, const Tensor & self, const Tensor & values);
TORCH_API Tensor & heaviside_outf(const Tensor & self, const Tensor & values, Tensor & out);
TORCH_API Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addmm_outf(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor to_sparse(const Tensor & self, int64_t sparse_dim);
TORCH_API Tensor to_sparse(const Tensor & self);
TORCH_API Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype);
TORCH_API Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point);
TORCH_API std::tuple<Tensor,Tensor> fake_quantize_per_tensor_affine_cachemask(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
TORCH_API Tensor _fake_quantize_learnable_per_tensor_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
TORCH_API std::tuple<Tensor,Tensor> fake_quantize_per_channel_affine_cachemask(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
TORCH_API Tensor _fake_quantize_learnable_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor=1.0);
TORCH_API Scalar _local_scalar_dense(const Tensor & self);
TORCH_API std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias={}, const c10::optional<Tensor> & hidden_bias={});
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias);
TORCH_API std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias={}, const c10::optional<Tensor> & hidden_bias={});
TORCH_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias);
TORCH_API Tensor & set_(Tensor & self, Storage source);
TORCH_API Tensor & set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={});
TORCH_API Tensor & set_(Tensor & self, const Tensor & source);
TORCH_API Tensor & set_(Tensor & self);
TORCH_API bool is_set_to(const Tensor & self, const Tensor & tensor);
TORCH_API Tensor & masked_fill_(Tensor & self, const Tensor & mask, Scalar value);
TORCH_API Tensor & masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value);
TORCH_API Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source);
TORCH_API Tensor view(const Tensor & self, IntArrayRef size);
TORCH_API Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate=false);
TORCH_API Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
TORCH_API Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value);
TORCH_API Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);
TORCH_API Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
TORCH_API Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value);
TORCH_API Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, std::string reduce);
TORCH_API Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value, std::string reduce);
TORCH_API Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);
TORCH_API Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & eq_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor eq(const Tensor & self, Scalar other);
TORCH_API Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & eq_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor eq(const Tensor & self, const Tensor & other);
TORCH_API Tensor & bitwise_and_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & bitwise_and_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & bitwise_and_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & bitwise_and_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor & bitwise_or_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & bitwise_or_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & bitwise_or_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & bitwise_or_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor & bitwise_xor_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & bitwise_xor_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor & bitwise_xor_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & bitwise_xor_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor __lshift__(const Tensor & self, Scalar other);
TORCH_API Tensor & __ilshift__(Tensor & self, Scalar other);
TORCH_API Tensor __lshift__(const Tensor & self, const Tensor & other);
TORCH_API Tensor & __ilshift__(Tensor & self, const Tensor & other);
TORCH_API Tensor __rshift__(const Tensor & self, Scalar other);
TORCH_API Tensor & __irshift__(Tensor & self, Scalar other);
TORCH_API Tensor __rshift__(const Tensor & self, const Tensor & other);
TORCH_API Tensor & __irshift__(Tensor & self, const Tensor & other);
TORCH_API Tensor & atan2_(Tensor & self, const Tensor & other);
TORCH_API Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & atan2_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor atan2(const Tensor & self, const Tensor & other);
TORCH_API Tensor & tril_(Tensor & self, int64_t diagonal=0);
TORCH_API Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal=0);
TORCH_API Tensor & tril_outf(const Tensor & self, int64_t diagonal, Tensor & out);
TORCH_API Tensor & triu_(Tensor & self, int64_t diagonal=0);
TORCH_API Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal=0);
TORCH_API Tensor & triu_outf(const Tensor & self, int64_t diagonal, Tensor & out);
TORCH_API Tensor & digamma_(Tensor & self);
TORCH_API Tensor & digamma_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & digamma_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor digamma(const Tensor & self);
TORCH_API Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm);
TORCH_API Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm);
TORCH_API Tensor & renorm_outf(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm, Tensor & out);
TORCH_API Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm);
TORCH_API Tensor & lerp_(Tensor & self, const Tensor & end, Scalar weight);
TORCH_API Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight);
TORCH_API Tensor & lerp_outf(const Tensor & self, const Tensor & end, Scalar weight, Tensor & out);
TORCH_API Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight);
TORCH_API Tensor & lerp_(Tensor & self, const Tensor & end, const Tensor & weight);
TORCH_API Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight);
TORCH_API Tensor & lerp_outf(const Tensor & self, const Tensor & end, const Tensor & weight, Tensor & out);
TORCH_API Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight);
TORCH_API Tensor & fmod_(Tensor & self, Scalar other);
TORCH_API Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & fmod_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor fmod(const Tensor & self, Scalar other);
TORCH_API Tensor & fmod_(Tensor & self, const Tensor & other);
TORCH_API Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & fmod_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor fmod(const Tensor & self, const Tensor & other);
TORCH_API Tensor & remainder_(Tensor & self, Scalar other);
TORCH_API Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & remainder_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor remainder(const Tensor & self, Scalar other);
TORCH_API Tensor & remainder_(Tensor & self, const Tensor & other);
TORCH_API Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & remainder_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor remainder(const Tensor & self, const Tensor & other);
TORCH_API Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addbmm_outf(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha, Tensor & out);
TORCH_API Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);
TORCH_API Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);
TORCH_API Tensor & addcdiv_outf(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value, Tensor & out);
TORCH_API Tensor & random_(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & random_(Tensor & self, int64_t to, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & random_(Tensor & self, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & uniform_(Tensor & self, double from=0, double to=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & cauchy_(Tensor & self, double median=0, double sigma=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & log_normal_(Tensor & self, double mean=1, double std=2, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & exponential_(Tensor & self, double lambd=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal=0);
TORCH_API Tensor & diag_outf(const Tensor & self, int64_t diagonal, Tensor & out);
TORCH_API Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);
TORCH_API Tensor & cross_outf(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out);
TORCH_API Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);
TORCH_API Tensor tril_indices(int64_t row, int64_t col, int64_t offset=0, TensorOptions options=at::kLong);
TORCH_API Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
TORCH_API Tensor triu_indices(int64_t row, int64_t col, int64_t offset=0, TensorOptions options=at::kLong);
TORCH_API Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory);
TORCH_API Tensor trace(const Tensor & self);
TORCH_API Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & ne_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor ne(const Tensor & self, Scalar other);
TORCH_API Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & ne_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor ne(const Tensor & self, const Tensor & other);
TORCH_API Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & ge_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor ge(const Tensor & self, Scalar other);
TORCH_API Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & ge_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor ge(const Tensor & self, const Tensor & other);
TORCH_API Tensor & le_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & le_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor le(const Tensor & self, Scalar other);
TORCH_API Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & le_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor le(const Tensor & self, const Tensor & other);
TORCH_API Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & gt_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor gt(const Tensor & self, Scalar other);
TORCH_API Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & gt_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor gt(const Tensor & self, const Tensor & other);
TORCH_API Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other);
TORCH_API Tensor & lt_outf(const Tensor & self, Scalar other, Tensor & out);
TORCH_API Tensor lt(const Tensor & self, Scalar other);
TORCH_API Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & lt_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor lt(const Tensor & self, const Tensor & other);
TORCH_API Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index);
TORCH_API Tensor & take_outf(const Tensor & self, const Tensor & index, Tensor & out);
TORCH_API Tensor take(const Tensor & self, const Tensor & index);
TORCH_API Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index);
TORCH_API Tensor & index_select_outf(const Tensor & self, int64_t dim, const Tensor & index, Tensor & out);
TORCH_API Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index);
TORCH_API Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask);
TORCH_API Tensor & masked_select_outf(const Tensor & self, const Tensor & mask, Tensor & out);
TORCH_API Tensor masked_select(const Tensor & self, const Tensor & mask);
TORCH_API Tensor & nonzero_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & nonzero_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor nonzero(const Tensor & self);
TORCH_API Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);
TORCH_API Tensor & gather_outf(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad, Tensor & out);
TORCH_API Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);
TORCH_API Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);
TORCH_API Tensor & addcmul_outf(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value, Tensor & out);
TORCH_API std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A);
TORCH_API std::tuple<Tensor &,Tensor &> lstsq_outf(const Tensor & self, const Tensor & A, Tensor & X, Tensor & qr);
TORCH_API std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A);
TORCH_API std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);
TORCH_API std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper);
TORCH_API std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv);
TORCH_API Tensor _cholesky_helper(const Tensor & self, bool upper);
TORCH_API Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper);
TORCH_API std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A);
TORCH_API Tensor cholesky_inverse(const Tensor & self, bool upper=false);
TORCH_API Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper=false);
TORCH_API Tensor & cholesky_inverse_outf(const Tensor & self, bool upper, Tensor & out);
TORCH_API std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> geqrf_outf(const Tensor & self, Tensor & a, Tensor & tau);
TORCH_API std::tuple<Tensor,Tensor> geqrf(const Tensor & self);
TORCH_API std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot=true, bool check_errors=true);
TORCH_API Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);
TORCH_API Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement=false, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & multinomial_outf(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement=false, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & lgamma_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & lgamma_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & lgamma_(Tensor & self);
TORCH_API Tensor lgamma(const Tensor & self);
TORCH_API Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self);
TORCH_API Tensor & polygamma_outf(int64_t n, const Tensor & self, Tensor & out);
TORCH_API Tensor erfinv(const Tensor & self);
TORCH_API Tensor & erfinv_(Tensor & self);
TORCH_API Tensor & erfinv_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & erfinv_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & i0_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & i0_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & sign_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & sign_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & signbit_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & signbit_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);
TORCH_API Tensor & histc_outf(const Tensor & self, int64_t bins, Scalar min, Scalar max, Tensor & out);
TORCH_API Tensor histc(const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);
TORCH_API Tensor & hypot_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & hypot_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor hypot(const Tensor & self, const Tensor & other);
TORCH_API Tensor & igamma_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & igamma_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor igamma(const Tensor & self, const Tensor & other);
TORCH_API Tensor & igamma_(Tensor & self, const Tensor & other);
TORCH_API Tensor & igammac_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & igammac_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor igammac(const Tensor & self, const Tensor & other);
TORCH_API Tensor & igammac_(Tensor & self, const Tensor & other);
TORCH_API Tensor & nextafter_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & nextafter_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor nextafter(const Tensor & self, const Tensor & other);
TORCH_API Tensor min(const Tensor & self);
TORCH_API Tensor fmin(const Tensor & self, const Tensor & other);
TORCH_API Tensor & fmin_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & fmin_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor max(const Tensor & self);
TORCH_API Tensor fmax(const Tensor & self, const Tensor & other);
TORCH_API Tensor & fmax_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & fmax_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor maximum(const Tensor & self, const Tensor & other);
TORCH_API Tensor & maximum_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & maximum_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API Tensor minimum(const Tensor & self, const Tensor & other);
TORCH_API Tensor & minimum_out(Tensor & out, const Tensor & self, const Tensor & other);
TORCH_API Tensor & minimum_outf(const Tensor & self, const Tensor & other, Tensor & out);
TORCH_API std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool descending=false);
TORCH_API std::tuple<Tensor &,Tensor &> sort_outf(const Tensor & self, int64_t dim, bool descending, Tensor & values, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim=-1, bool descending=false);
TORCH_API std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);
TORCH_API std::tuple<Tensor &,Tensor &> topk_outf(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, Tensor & values, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);
TORCH_API Tensor all(const Tensor & self);
TORCH_API Tensor any(const Tensor & self);
TORCH_API Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step);
TORCH_API Tensor unfold_backward(const Tensor & grad_in, IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step);
TORCH_API bool equal(const Tensor & self, const Tensor & other);
TORCH_API Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent);
TORCH_API Tensor & pow_outf(const Tensor & self, const Tensor & exponent, Tensor & out);
TORCH_API Tensor pow(const Tensor & self, const Tensor & exponent);
TORCH_API Tensor & pow_(Tensor & self, const Tensor & exponent);
TORCH_API Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent);
TORCH_API Tensor & pow_outf(Scalar self, const Tensor & exponent, Tensor & out);
TORCH_API Tensor pow(Scalar self, const Tensor & exponent);
TORCH_API Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent);
TORCH_API Tensor & pow_outf(const Tensor & self, Scalar exponent, Tensor & out);
TORCH_API Tensor pow(const Tensor & self, Scalar exponent);
TORCH_API Tensor & pow_(Tensor & self, Scalar exponent);
TORCH_API Tensor & normal_(Tensor & self, double mean=0, double std=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_out(Tensor & out, const Tensor & mean, double std=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_outf(const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor normal(const Tensor & mean, double std=1, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_out(Tensor & out, double mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_outf(double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor normal(double mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & normal_outf(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor normal(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);
TORCH_API Tensor _cumsum(const Tensor & self, int64_t dim);
TORCH_API Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim);
TORCH_API Tensor & _cumsum_outf(const Tensor & self, int64_t dim, Tensor & out);
TORCH_API Tensor _cumprod(const Tensor & self, int64_t dim);
TORCH_API Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim);
TORCH_API Tensor & _cumprod_outf(const Tensor & self, int64_t dim, Tensor & out);
TORCH_API void _amp_foreach_non_finite_check_and_unscale_(TensorList self, Tensor & found_inf, const Tensor & inv_scale);
TORCH_API Tensor _amp_update_scale(Tensor & growth_tracker, const Tensor & current_scale, const Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
TORCH_API Tensor _cat(TensorList tensors, int64_t dim=0);
TORCH_API Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim=0);
TORCH_API Tensor & _cat_outf(TensorList tensors, int64_t dim, Tensor & out);
TORCH_API std::vector<Tensor> _foreach_add(TensorList tensors, Scalar scalar);
TORCH_API void _foreach_add_(TensorList self, Scalar scalar);
TORCH_API std::vector<Tensor> _foreach_sub(TensorList tensors, Scalar scalar);
TORCH_API void _foreach_sub_(TensorList self, Scalar scalar);
TORCH_API std::vector<Tensor> _foreach_mul(TensorList tensors, Scalar scalar);
TORCH_API void _foreach_mul_(TensorList self, Scalar scalar);
TORCH_API std::vector<Tensor> _foreach_div(TensorList tensors, Scalar scalar);
TORCH_API void _foreach_div_(TensorList self, Scalar scalar);
TORCH_API std::vector<Tensor> _foreach_add(TensorList tensors1, TensorList tensors2, Scalar alpha=1);
TORCH_API void _foreach_add_(TensorList self, TensorList other, Scalar alpha=1);
TORCH_API std::vector<Tensor> _foreach_sub(TensorList tensors1, TensorList tensors2, Scalar alpha=1);
TORCH_API void _foreach_sub_(TensorList self, TensorList other, Scalar alpha=1);
TORCH_API std::vector<Tensor> _foreach_mul(TensorList tensors1, TensorList tensors2);
TORCH_API void _foreach_mul_(TensorList self, TensorList other);
TORCH_API std::vector<Tensor> _foreach_div(TensorList tensors1, TensorList tensors2);
TORCH_API void _foreach_div_(TensorList self, TensorList other);
TORCH_API std::vector<Tensor> _foreach_add(TensorList tensors, ArrayRef<double> scalars);
TORCH_API void _foreach_add_(TensorList self, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_sub(TensorList tensors, ArrayRef<double> scalars);
TORCH_API void _foreach_sub_(TensorList self, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_div(TensorList tensors, ArrayRef<double> scalars);
TORCH_API void _foreach_div_(TensorList self, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_mul(TensorList tensors, ArrayRef<double> scalars);
TORCH_API void _foreach_mul_(TensorList self, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_exp(TensorList tensors);
TORCH_API void _foreach_zero_(TensorList self);
TORCH_API void _foreach_exp_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_sqrt(TensorList tensors);
TORCH_API void _foreach_sqrt_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_abs(TensorList tensors);
TORCH_API void _foreach_abs_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_acos(TensorList tensors);
TORCH_API void _foreach_acos_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_asin(TensorList tensors);
TORCH_API void _foreach_asin_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_atan(TensorList tensors);
TORCH_API void _foreach_atan_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_ceil(TensorList tensors);
TORCH_API void _foreach_ceil_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_cos(TensorList tensors);
TORCH_API void _foreach_cos_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_cosh(TensorList tensors);
TORCH_API void _foreach_cosh_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_erf(TensorList tensors);
TORCH_API void _foreach_erf_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_erfc(TensorList tensors);
TORCH_API void _foreach_erfc_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_expm1(TensorList tensors);
TORCH_API void _foreach_expm1_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_floor(TensorList tensors);
TORCH_API void _foreach_floor_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_log(TensorList tensors);
TORCH_API void _foreach_log_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_log10(TensorList tensors);
TORCH_API void _foreach_log10_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_log1p(TensorList tensors);
TORCH_API void _foreach_log1p_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_log2(TensorList tensors);
TORCH_API void _foreach_log2_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_neg(TensorList tensors);
TORCH_API void _foreach_neg_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_tan(TensorList tensors);
TORCH_API void _foreach_tan_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_tanh(TensorList tensors);
TORCH_API void _foreach_tanh_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_sin(TensorList tensors);
TORCH_API void _foreach_sin_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_sinh(TensorList tensors);
TORCH_API void _foreach_sinh_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_round(TensorList tensors);
TORCH_API void _foreach_round_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_lgamma(TensorList tensors);
TORCH_API void _foreach_lgamma_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_frac(TensorList tensors);
TORCH_API void _foreach_frac_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_reciprocal(TensorList tensors);
TORCH_API void _foreach_reciprocal_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_sigmoid(TensorList tensors);
TORCH_API void _foreach_sigmoid_(TensorList self);
TORCH_API std::vector<Tensor> _foreach_trunc(TensorList tensors);
TORCH_API void _foreach_trunc_(TensorList self);
TORCH_API void _foreach_addcdiv_(TensorList self, TensorList tensor1, TensorList tensor2, Scalar value=1);
TORCH_API void _foreach_addcmul_(TensorList self, TensorList tensor1, TensorList tensor2, Scalar value=1);
TORCH_API void _foreach_addcdiv_(TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<double> scalars);
TORCH_API void _foreach_addcmul_(TensorList self, TensorList tensor1, TensorList tensor2, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_addcdiv(TensorList input, TensorList tensor1, TensorList tensor2, Scalar value=1);
TORCH_API std::vector<Tensor> _foreach_addcmul(TensorList input, TensorList tensor1, TensorList tensor2, Scalar value=1);
TORCH_API std::vector<Tensor> _foreach_addcdiv(TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_addcmul(TensorList input, TensorList tensor1, TensorList tensor2, ArrayRef<double> scalars);
TORCH_API std::vector<Tensor> _foreach_maximum(TensorList tensors1, TensorList tensors2);
TORCH_API std::vector<Tensor> _foreach_minimum(TensorList tensors1, TensorList tensors2);
TORCH_API std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim=-1, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);
TORCH_API std::tuple<Tensor &,Tensor &> _mode_outf(const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices);
TORCH_API Tensor bucketize(const Tensor & self, const Tensor & boundaries, bool out_int32=false, bool right=false);
TORCH_API Tensor & bucketize_out(Tensor & out, const Tensor & self, const Tensor & boundaries, bool out_int32=false, bool right=false);
TORCH_API Tensor & bucketize_outf(const Tensor & self, const Tensor & boundaries, bool out_int32, bool right, Tensor & out);
TORCH_API Tensor bucketize(Scalar self, const Tensor & boundaries, bool out_int32=false, bool right=false);
TORCH_API Tensor searchsorted(const Tensor & sorted_sequence, const Tensor & self, bool out_int32=false, bool right=false);
TORCH_API Tensor & searchsorted_out(Tensor & out, const Tensor & sorted_sequence, const Tensor & self, bool out_int32=false, bool right=false);
TORCH_API Tensor & searchsorted_outf(const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right, Tensor & out);
TORCH_API Tensor searchsorted(const Tensor & sorted_sequence, Scalar self, bool out_int32=false, bool right=false);
TORCH_API Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & mse_loss_outf(const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out);
TORCH_API Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
TORCH_API Tensor & mse_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input);
TORCH_API Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
TORCH_API Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);
TORCH_API Tensor & l1_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input);
TORCH_API Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p=1, Scalar margin=1, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & multi_margin_loss_outf(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out);
TORCH_API Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p=1, Scalar margin=1, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API Tensor & multi_margin_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input);
TORCH_API Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
TORCH_API std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction);
TORCH_API std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_outf(const Tensor & self, const Tensor & target, int64_t reduction, Tensor & output, Tensor & is_target);
TORCH_API std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction);
TORCH_API Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);
TORCH_API Tensor & multilabel_margin_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target, Tensor & grad_input);
TORCH_API Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);
TORCH_API std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
TORCH_API std::tuple<Tensor &,Tensor &> nll_loss_forward_outf(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight);
TORCH_API std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
TORCH_API Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
TORCH_API Tensor & nll_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input);
TORCH_API Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
TORCH_API std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
TORCH_API std::tuple<Tensor &,Tensor &> nll_loss2d_forward_outf(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight);
TORCH_API std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index);
TORCH_API Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
TORCH_API Tensor & nll_loss2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input);
TORCH_API Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);
TORCH_API Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double beta=1.0);
TORCH_API Tensor & smooth_l1_loss_outf(const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & out);
TORCH_API Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction=at::Reduction::Mean, double beta=1.0);
TORCH_API Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta);
TORCH_API Tensor & smooth_l1_loss_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & grad_input);
TORCH_API Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1);
TORCH_API Tensor & elu_outf(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale, Tensor & out);
TORCH_API Tensor elu(const Tensor & self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1);
TORCH_API Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, const Tensor & self_or_result);
TORCH_API Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim=-1);
TORCH_API Tensor & glu_outf(const Tensor & self, int64_t dim, Tensor & out);
TORCH_API Tensor glu(const Tensor & self, int64_t dim=-1);
TORCH_API Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim);
TORCH_API Tensor & glu_backward_outf(const Tensor & grad_output, const Tensor & self, int64_t dim, Tensor & grad_input);
TORCH_API Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim);
TORCH_API Tensor & hardsigmoid_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & hardsigmoid_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor hardsigmoid(const Tensor & self);
TORCH_API Tensor & hardsigmoid_(Tensor & self);
TORCH_API Tensor hardsigmoid_backward(const Tensor & grad_output, const Tensor & self);
TORCH_API Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val=-1, Scalar max_val=1);
TORCH_API Tensor & hardtanh_outf(const Tensor & self, Scalar min_val, Scalar max_val, Tensor & out);
TORCH_API Tensor hardtanh(const Tensor & self, Scalar min_val=-1, Scalar max_val=1);
TORCH_API Tensor & hardtanh_(Tensor & self, Scalar min_val=-1, Scalar max_val=1);
TORCH_API Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val);
TORCH_API Tensor & hardtanh_backward_outf(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val, Tensor & grad_input);
TORCH_API Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val);
TORCH_API Tensor & hardswish_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & hardswish_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor hardswish(const Tensor & self);
TORCH_API Tensor & hardswish_(Tensor & self);
TORCH_API Tensor hardswish_backward(const Tensor & grad_output, const Tensor & self);
TORCH_API Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope=0.01);
TORCH_API Tensor & leaky_relu_outf(const Tensor & self, Scalar negative_slope, Tensor & out);
TORCH_API Tensor leaky_relu(const Tensor & self, Scalar negative_slope=0.01);
TORCH_API Tensor & leaky_relu_(Tensor & self, Scalar negative_slope=0.01);
TORCH_API Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope, bool self_is_result);
TORCH_API std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> log_sigmoid_forward_outf(const Tensor & self, Tensor & output, Tensor & buffer);
TORCH_API std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self);
TORCH_API Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer);
TORCH_API Tensor & log_sigmoid_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & buffer, Tensor & grad_input);
TORCH_API Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer);
TORCH_API Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & rrelu_with_noise_outf(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator, Tensor & out);
TORCH_API Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, c10::optional<Generator> generator=c10::nullopt);
TORCH_API Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta=1, Scalar threshold=20);
TORCH_API Tensor & softplus_outf(const Tensor & self, Scalar beta, Scalar threshold, Tensor & out);
TORCH_API Tensor softplus(const Tensor & self, Scalar beta=1, Scalar threshold=20);
TORCH_API Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output);
TORCH_API Tensor & softplus_backward_outf(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output, Tensor & grad_input);
TORCH_API Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output);
TORCH_API Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd=0.5);
TORCH_API Tensor & softshrink_outf(const Tensor & self, Scalar lambd, Tensor & out);
TORCH_API Tensor softshrink(const Tensor & self, Scalar lambd=0.5);
TORCH_API Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd);
TORCH_API Tensor & softshrink_backward_outf(const Tensor & grad_output, const Tensor & self, Scalar lambd, Tensor & grad_input);
TORCH_API Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd);
TORCH_API Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor & adaptive_avg_pool2d_outf(const Tensor & self, IntArrayRef output_size, Tensor & out);
TORCH_API Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self);
TORCH_API Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor & adaptive_avg_pool3d_outf(const Tensor & self, IntArrayRef output_size, Tensor & out);
TORCH_API Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self);
TORCH_API Tensor & adaptive_avg_pool3d_backward_outf(const Tensor & grad_output, const Tensor & self, Tensor & grad_input);
TORCH_API Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);
TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_outf(const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
TORCH_API Tensor & adaptive_max_pool2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);
TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);
TORCH_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_outf(const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size);
TORCH_API Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);
TORCH_API Tensor & adaptive_max_pool3d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);
TORCH_API Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
TORCH_API Tensor & avg_pool2d_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out);
TORCH_API Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
TORCH_API Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
TORCH_API Tensor & avg_pool2d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input);
TORCH_API Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
TORCH_API Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
TORCH_API Tensor & avg_pool3d_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out);
TORCH_API Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);
TORCH_API Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
TORCH_API Tensor & avg_pool3d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input);
TORCH_API Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
TORCH_API Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
TORCH_API Tensor & fractional_max_pool2d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
TORCH_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);
TORCH_API Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
TORCH_API Tensor & fractional_max_pool3d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);
TORCH_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
TORCH_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
TORCH_API Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
TORCH_API Tensor & max_pool2d_with_indices_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
TORCH_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
TORCH_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices);
TORCH_API std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);
TORCH_API Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
TORCH_API Tensor & max_pool3d_with_indices_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input);
TORCH_API Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);
TORCH_API Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
TORCH_API Tensor & max_unpool2d_outf(const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & out);
TORCH_API Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size);
TORCH_API Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
TORCH_API Tensor & max_unpool2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & grad_input);
TORCH_API Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);
TORCH_API Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
TORCH_API Tensor & max_unpool3d_outf(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & out);
TORCH_API Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
TORCH_API Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
TORCH_API Tensor & max_unpool3d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);
TORCH_API Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad1d_outf(const Tensor & self, IntArrayRef padding, Tensor & out);
TORCH_API Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad1d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad2d_outf(const Tensor & self, IntArrayRef padding, Tensor & out);
TORCH_API Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & reflection_pad2d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad1d_outf(const Tensor & self, IntArrayRef padding, Tensor & out);
TORCH_API Tensor replication_pad1d(const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad1d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad2d_outf(const Tensor & self, IntArrayRef padding, Tensor & out);
TORCH_API Tensor replication_pad2d(const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad2d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad3d_outf(const Tensor & self, IntArrayRef padding, Tensor & out);
TORCH_API Tensor replication_pad3d(const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor & replication_pad3d_backward_outf(const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input);
TORCH_API Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);
TORCH_API Tensor upsample_linear1d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_linear1d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_bilinear2d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_bilinear2d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_trilinear3d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_trilinear3d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_bicubic2d(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_bicubic2d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_nearest3d(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor upsample_nearest3d_backward(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors);
TORCH_API Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_linear1d_outf(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out);
TORCH_API Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_linear1d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input);
TORCH_API Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bilinear2d_outf(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
TORCH_API Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bilinear2d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
TORCH_API Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bicubic2d_outf(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
TORCH_API Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_bicubic2d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
TORCH_API Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_trilinear3d_outf(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
TORCH_API Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_trilinear3d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
TORCH_API Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_nearest1d_outf(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out);
TORCH_API Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_nearest1d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input);
TORCH_API Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales=c10::nullopt);
TORCH_API Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest2d_outf(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
TORCH_API Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest2d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
TORCH_API Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest3d_outf(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out);
TORCH_API Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & upsample_nearest3d_backward_outf(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input);
TORCH_API Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d=c10::nullopt, c10::optional<double> scales_h=c10::nullopt, c10::optional<double> scales_w=c10::nullopt);
TORCH_API Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output);
TORCH_API Tensor & sigmoid_backward_outf(const Tensor & grad_output, const Tensor & output, Tensor & grad_input);
TORCH_API Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output);
TORCH_API Tensor & logit_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps=c10::nullopt);
TORCH_API Tensor & logit_backward_outf(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input);
TORCH_API Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps=c10::nullopt);
TORCH_API Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output);
TORCH_API Tensor & tanh_backward_outf(const Tensor & grad_output, const Tensor & output, Tensor & grad_input);
TORCH_API Tensor tanh_backward(const Tensor & grad_output, const Tensor & output);
TORCH_API Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
TORCH_API Tensor & slow_conv_transpose2d_outf(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out);
TORCH_API Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);
TORCH_API Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
TORCH_API Tensor & slow_conv_transpose3d_outf(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out);
TORCH_API Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_outf(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input);
TORCH_API std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input);
TORCH_API std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias);
TORCH_API std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);
TORCH_API Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
TORCH_API Tensor & thnn_conv_depthwise2d_forward_outf(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out);
TORCH_API Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
TORCH_API std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);
TORCH_API std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_outf(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight);
TORCH_API std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask);
TORCH_API Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
TORCH_API Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);
TORCH_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);
TORCH_API Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & col2im_outf(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out);
TORCH_API Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & col2im_backward_outf(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input);
TORCH_API Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & im2col_outf(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out);
TORCH_API Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API Tensor & im2col_backward_outf(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input);
TORCH_API Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);
TORCH_API void record_stream(Tensor & self, Stream s);
TORCH_API Tensor & isposinf_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & isposinf_outf(const Tensor & self, Tensor & out);
TORCH_API Tensor & isneginf_out(Tensor & out, const Tensor & self);
TORCH_API Tensor & isneginf_outf(const Tensor & self, Tensor & out);
TORCH_API std::tuple<Tensor,Tensor> linalg_slogdet(const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> linalg_slogdet_out(Tensor & sign, Tensor & logabsdet, const Tensor & self);
TORCH_API std::tuple<Tensor &,Tensor &> linalg_slogdet_outf(const Tensor & self, Tensor & sign, Tensor & logabsdet);
TORCH_API std::tuple<Tensor,Tensor> _syevd_helper(const Tensor & self, bool compute_eigenvectors, std::string uplo);
TORCH_API Tensor & _linalg_inv_out_helper_(Tensor & self, Tensor & infos_lu, Tensor & infos_getri);
TORCH_API Tensor & _linalg_solve_out_helper_(Tensor & self, Tensor & other, Tensor & infos);
TORCH_API std::tuple<Tensor,Tensor> _linalg_qr_helper(const Tensor & self, std::string mode);

} // namespace cuda
} // namespace at
