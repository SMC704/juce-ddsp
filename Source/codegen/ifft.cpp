//
//  Academic License - for use in teaching, academic research, and meeting
//  course requirements at degree granting institutions only.  Not for
//  government, commercial, or other organizational use.
//
//  ifft.cpp
//
//  Code generation for function 'ifft'
//


// Include files
#include "ifft.h"
#include "FFTImplementationCallback.h"
#include "rt_nonfinite.h"
#include "coder_array.h"
#include <cmath>
#include <cstring>

// Function Definitions
namespace coder
{
  void ifft(const creal_T x[65], creal_T y[65])
  {
    static const creal_T wwc[129] = { { -0.99883222683232664,// re
        0.048313379525507079           // im
      }, { -0.98137012613941343,       // re
        0.19212671735370834            // im
      }, { -0.90687436085054551,       // re
        0.42140110777252887            // im
      }, { -0.71559896074412122,       // re
        0.69851136524893687            // im
      }, { -0.3546048870425359,        // re
        0.93501624268541472            // im
      }, { 0.16835704134703883,        // re
        0.98572608093165082            // im
      }, { 0.71559896074412066,        // re
        0.69851136524893742            // im
      }, { 0.99883222683232653,        // re
        0.048313379525507447           // im
      }, { 0.7155989607441211,         // re
        -0.698511365248937             // im
      }, { -0.12053668025532288,       // re
        -0.992708874098054             // im
      }, { -0.9068743608505454,        // re
        -0.42140110777252909           // im
      }, { -0.77967435406322239,       // re
        0.6261851975383137             // im
      }, { 0.30901699437494723,        // re
        0.95105651629515364            // im
      }, { 0.99883222683232664,        // re
        -0.048313379525507065          // im
      }, { 0.12053668025532323,        // re
        -0.992708874098054             // im
      }, { -0.98137012613941343,       // re
        -0.19212671735370859           // im
      }, { -0.16835704134703833,       // re
        0.98572608093165093            // im
      }, { 0.99883222683232653,        // re
        0.048313379525507447           // im
      }, { -0.16835704134703852,       // re
        -0.98572608093165093           // im
      }, { -0.88545602565320991,       // re
        0.46472317204376845            // im
      }, { 0.77967435406322216,        // re
        0.62618519753831392            // im
      }, { 0.16835704134703863,        // re
        -0.98572608093165082           // im
      }, { -0.90687436085054551,       // re
        0.42140110777252887            // im
      }, { 0.90687436085054562,        // re
        0.42140110777252882            // im
      }, { -0.35460488704253545,       // re
        -0.93501624268541483           // im
      }, { -0.30901699437494756,       // re
        0.95105651629515353            // im
      }, { 0.77967435406322239,        // re
        -0.6261851975383137            // im
      }, { -0.98137012613941343,       // re
        0.19212671735370834            // im
      }, { 0.98137012613941343,        // re
        0.19212671735370829            // im
      }, { -0.8854560256532098,        // re
        -0.46472317204376867           // im
      }, { 0.77967435406322216,        // re
        0.62618519753831392            // im
      }, { -0.7155989607441211,        // re
        -0.698511365248937             // im
      }, { 0.71559896074412066,        // re
        0.69851136524893742            // im
      }, { -0.77967435406322227,       // re
        -0.62618519753831392           // im
      }, { 0.88545602565320958,        // re
        0.46472317204376917            // im
      }, { -0.98137012613941343,       // re
        -0.19212671735370859           // im
      }, { 0.98137012613941343,        // re
        -0.19212671735370837           // im
      }, { -0.77967435406322239,       // re
        0.6261851975383137             // im
      }, { 0.30901699437494745,        // re
        -0.95105651629515353           // im
      }, { 0.35460488704253557,        // re
        0.93501624268541483            // im
      }, { -0.9068743608505454,        // re
        -0.42140110777252909           // im
      }, { 0.9068743608505454,         // re
        -0.42140110777252909           // im
      }, { -0.16835704134703833,       // re
        0.98572608093165093            // im
      }, { -0.77967435406322227,       // re
        -0.62618519753831392           // im
      }, { 0.88545602565320991,        // re
        -0.46472317204376851           // im
      }, { 0.16835704134703883,        // re
        0.98572608093165082            // im
      }, { -0.99883222683232653,       // re
        -0.048313379525507322          // im
      }, { 0.16835704134703863,        // re
        -0.98572608093165082           // im
      }, { 0.98137012613941343,        // re
        0.19212671735370829            // im
      }, { -0.12053668025532269,       // re
        0.99270887409805408            // im
      }, { -0.99883222683232664,       // re
        0.048313379525507079           // im
      }, { -0.30901699437494734,       // re
        -0.95105651629515364           // im
      }, { 0.77967435406322239,        // re
        -0.6261851975383137            // im
      }, { 0.90687436085054562,        // re
        0.42140110777252882            // im
      }, { 0.1205366802553232,         // re
        0.992708874098054              // im
      }, { -0.71559896074412122,       // re
        0.69851136524893687            // im
      }, { -0.99883222683232653,       // re
        -0.048313379525507322          // im
      }, { -0.7155989607441211,        // re
        -0.698511365248937             // im
      }, { -0.16835704134703852,       // re
        -0.98572608093165093           // im
      }, { 0.35460488704253557,        // re
        -0.93501624268541483           // im
      }, { 0.7155989607441211,         // re
        -0.698511365248937             // im
      }, { 0.9068743608505454,         // re
        -0.42140110777252909           // im
      }, { 0.98137012613941343,        // re
        -0.19212671735370837           // im
      }, { 0.99883222683232664,        // re
        -0.048313379525507065          // im
      }, { 1.0,                        // re
        0.0                            // im
      }, { 0.99883222683232664,        // re
        -0.048313379525507065          // im
      }, { 0.98137012613941343,        // re
        -0.19212671735370837           // im
      }, { 0.9068743608505454,         // re
        -0.42140110777252909           // im
      }, { 0.7155989607441211,         // re
        -0.698511365248937             // im
      }, { 0.35460488704253557,        // re
        -0.93501624268541483           // im
      }, { -0.16835704134703852,       // re
        -0.98572608093165093           // im
      }, { -0.7155989607441211,        // re
        -0.698511365248937             // im
      }, { -0.99883222683232653,       // re
        -0.048313379525507322          // im
      }, { -0.71559896074412122,       // re
        0.69851136524893687            // im
      }, { 0.1205366802553232,         // re
        0.992708874098054              // im
      }, { 0.90687436085054562,        // re
        0.42140110777252882            // im
      }, { 0.77967435406322239,        // re
        -0.6261851975383137            // im
      }, { -0.30901699437494734,       // re
        -0.95105651629515364           // im
      }, { -0.99883222683232664,       // re
        0.048313379525507079           // im
      }, { -0.12053668025532269,       // re
        0.99270887409805408            // im
      }, { 0.98137012613941343,        // re
        0.19212671735370829            // im
      }, { 0.16835704134703863,        // re
        -0.98572608093165082           // im
      }, { -0.99883222683232653,       // re
        -0.048313379525507322          // im
      }, { 0.16835704134703883,        // re
        0.98572608093165082            // im
      }, { 0.88545602565320991,        // re
        -0.46472317204376851           // im
      }, { -0.77967435406322227,       // re
        -0.62618519753831392           // im
      }, { -0.16835704134703833,       // re
        0.98572608093165093            // im
      }, { 0.9068743608505454,         // re
        -0.42140110777252909           // im
      }, { -0.9068743608505454,        // re
        -0.42140110777252909           // im
      }, { 0.35460488704253557,        // re
        0.93501624268541483            // im
      }, { 0.30901699437494745,        // re
        -0.95105651629515353           // im
      }, { -0.77967435406322239,       // re
        0.6261851975383137             // im
      }, { 0.98137012613941343,        // re
        -0.19212671735370837           // im
      }, { -0.98137012613941343,       // re
        -0.19212671735370859           // im
      }, { 0.88545602565320958,        // re
        0.46472317204376917            // im
      }, { -0.77967435406322227,       // re
        -0.62618519753831392           // im
      }, { 0.71559896074412066,        // re
        0.69851136524893742            // im
      }, { -0.7155989607441211,        // re
        -0.698511365248937             // im
      }, { 0.77967435406322216,        // re
        0.62618519753831392            // im
      }, { -0.8854560256532098,        // re
        -0.46472317204376867           // im
      }, { 0.98137012613941343,        // re
        0.19212671735370829            // im
      }, { -0.98137012613941343,       // re
        0.19212671735370834            // im
      }, { 0.77967435406322239,        // re
        -0.6261851975383137            // im
      }, { -0.30901699437494756,       // re
        0.95105651629515353            // im
      }, { -0.35460488704253545,       // re
        -0.93501624268541483           // im
      }, { 0.90687436085054562,        // re
        0.42140110777252882            // im
      }, { -0.90687436085054551,       // re
        0.42140110777252887            // im
      }, { 0.16835704134703863,        // re
        -0.98572608093165082           // im
      }, { 0.77967435406322216,        // re
        0.62618519753831392            // im
      }, { -0.88545602565320991,       // re
        0.46472317204376845            // im
      }, { -0.16835704134703852,       // re
        -0.98572608093165093           // im
      }, { 0.99883222683232653,        // re
        0.048313379525507447           // im
      }, { -0.16835704134703833,       // re
        0.98572608093165093            // im
      }, { -0.98137012613941343,       // re
        -0.19212671735370859           // im
      }, { 0.12053668025532323,        // re
        -0.992708874098054             // im
      }, { 0.99883222683232664,        // re
        -0.048313379525507065          // im
      }, { 0.30901699437494723,        // re
        0.95105651629515364            // im
      }, { -0.77967435406322239,       // re
        0.6261851975383137             // im
      }, { -0.9068743608505454,        // re
        -0.42140110777252909           // im
      }, { -0.12053668025532288,       // re
        -0.992708874098054             // im
      }, { 0.7155989607441211,         // re
        -0.698511365248937             // im
      }, { 0.99883222683232653,        // re
        0.048313379525507447           // im
      }, { 0.71559896074412066,        // re
        0.69851136524893742            // im
      }, { 0.16835704134703883,        // re
        0.98572608093165082            // im
      }, { -0.3546048870425359,        // re
        0.93501624268541472            // im
      }, { -0.71559896074412122,       // re
        0.69851136524893687            // im
      }, { -0.90687436085054551,       // re
        0.42140110777252887            // im
      }, { -0.98137012613941343,       // re
        0.19212671735370834            // im
      }, { -0.99883222683232664,       // re
        0.048313379525507079           // im
      } };

    static const double dv[129] = { 1.0, 0.99969881869620425,
      0.99879545620517241, 0.99729045667869021, 0.99518472667219693,
      0.99247953459871, 0.989176509964781, 0.98527764238894122,
      0.98078528040323043, 0.97570213003852857, 0.970031253194544,
      0.96377606579543984, 0.95694033573220882, 0.94952818059303667,
      0.94154406518302081, 0.932992798834739, 0.92387953251128674,
      0.91420975570353069, 0.90398929312344334, 0.89322430119551532,
      0.881921264348355, 0.87008699110871146, 0.85772861000027212,
      0.84485356524970712, 0.83146961230254524, 0.81758481315158371,
      0.80320753148064494, 0.78834642762660634, 0.773010453362737,
      0.75720884650648457, 0.74095112535495922, 0.724247082951467,
      0.70710678118654757, 0.68954054473706683, 0.67155895484701833,
      0.65317284295377676, 0.63439328416364549, 0.61523159058062682,
      0.59569930449243336, 0.57580819141784534, 0.55557023301960218,
      0.53499761988709715, 0.51410274419322166, 0.49289819222978404,
      0.47139673682599764, 0.44961132965460654, 0.42755509343028208,
      0.40524131400498986, 0.38268343236508978, 0.35989503653498811,
      0.33688985339222005, 0.31368174039889152, 0.29028467725446233,
      0.26671275747489837, 0.24298017990326387, 0.2191012401568698,
      0.19509032201612825, 0.17096188876030122, 0.14673047445536175,
      0.1224106751992162, 0.0980171403295606, 0.073564563599667426,
      0.049067674327418015, 0.024541228522912288, 0.0, -0.024541228522912288,
      -0.049067674327418015, -0.073564563599667426, -0.0980171403295606,
      -0.1224106751992162, -0.14673047445536175, -0.17096188876030122,
      -0.19509032201612825, -0.2191012401568698, -0.24298017990326387,
      -0.26671275747489837, -0.29028467725446233, -0.31368174039889152,
      -0.33688985339222005, -0.35989503653498811, -0.38268343236508978,
      -0.40524131400498986, -0.42755509343028208, -0.44961132965460654,
      -0.47139673682599764, -0.49289819222978404, -0.51410274419322166,
      -0.53499761988709715, -0.55557023301960218, -0.57580819141784534,
      -0.59569930449243336, -0.61523159058062682, -0.63439328416364549,
      -0.65317284295377676, -0.67155895484701833, -0.68954054473706683,
      -0.70710678118654757, -0.724247082951467, -0.74095112535495922,
      -0.75720884650648457, -0.773010453362737, -0.78834642762660634,
      -0.80320753148064494, -0.81758481315158371, -0.83146961230254524,
      -0.84485356524970712, -0.85772861000027212, -0.87008699110871146,
      -0.881921264348355, -0.89322430119551532, -0.90398929312344334,
      -0.91420975570353069, -0.92387953251128674, -0.932992798834739,
      -0.94154406518302081, -0.94952818059303667, -0.95694033573220882,
      -0.96377606579543984, -0.970031253194544, -0.97570213003852857,
      -0.98078528040323043, -0.98527764238894122, -0.989176509964781,
      -0.99247953459871, -0.99518472667219693, -0.99729045667869021,
      -0.99879545620517241, -0.99969881869620425, -1.0 };

    static const double dv1[129] = { 0.0, -0.024541228522912288,
      -0.049067674327418015, -0.073564563599667426, -0.0980171403295606,
      -0.1224106751992162, -0.14673047445536175, -0.17096188876030122,
      -0.19509032201612825, -0.2191012401568698, -0.24298017990326387,
      -0.26671275747489837, -0.29028467725446233, -0.31368174039889152,
      -0.33688985339222005, -0.35989503653498811, -0.38268343236508978,
      -0.40524131400498986, -0.42755509343028208, -0.44961132965460654,
      -0.47139673682599764, -0.49289819222978404, -0.51410274419322166,
      -0.53499761988709715, -0.55557023301960218, -0.57580819141784534,
      -0.59569930449243336, -0.61523159058062682, -0.63439328416364549,
      -0.65317284295377676, -0.67155895484701833, -0.68954054473706683,
      -0.70710678118654757, -0.724247082951467, -0.74095112535495922,
      -0.75720884650648457, -0.773010453362737, -0.78834642762660634,
      -0.80320753148064494, -0.81758481315158371, -0.83146961230254524,
      -0.84485356524970712, -0.85772861000027212, -0.87008699110871146,
      -0.881921264348355, -0.89322430119551532, -0.90398929312344334,
      -0.91420975570353069, -0.92387953251128674, -0.932992798834739,
      -0.94154406518302081, -0.94952818059303667, -0.95694033573220882,
      -0.96377606579543984, -0.970031253194544, -0.97570213003852857,
      -0.98078528040323043, -0.98527764238894122, -0.989176509964781,
      -0.99247953459871, -0.99518472667219693, -0.99729045667869021,
      -0.99879545620517241, -0.99969881869620425, -1.0, -0.99969881869620425,
      -0.99879545620517241, -0.99729045667869021, -0.99518472667219693,
      -0.99247953459871, -0.989176509964781, -0.98527764238894122,
      -0.98078528040323043, -0.97570213003852857, -0.970031253194544,
      -0.96377606579543984, -0.95694033573220882, -0.94952818059303667,
      -0.94154406518302081, -0.932992798834739, -0.92387953251128674,
      -0.91420975570353069, -0.90398929312344334, -0.89322430119551532,
      -0.881921264348355, -0.87008699110871146, -0.85772861000027212,
      -0.84485356524970712, -0.83146961230254524, -0.81758481315158371,
      -0.80320753148064494, -0.78834642762660634, -0.773010453362737,
      -0.75720884650648457, -0.74095112535495922, -0.724247082951467,
      -0.70710678118654757, -0.68954054473706683, -0.67155895484701833,
      -0.65317284295377676, -0.63439328416364549, -0.61523159058062682,
      -0.59569930449243336, -0.57580819141784534, -0.55557023301960218,
      -0.53499761988709715, -0.51410274419322166, -0.49289819222978404,
      -0.47139673682599764, -0.44961132965460654, -0.42755509343028208,
      -0.40524131400498986, -0.38268343236508978, -0.35989503653498811,
      -0.33688985339222005, -0.31368174039889152, -0.29028467725446233,
      -0.26671275747489837, -0.24298017990326387, -0.2191012401568698,
      -0.19509032201612825, -0.17096188876030122, -0.14673047445536175,
      -0.1224106751992162, -0.0980171403295606, -0.073564563599667426,
      -0.049067674327418015, -0.024541228522912288, -0.0 };

    static const double dv2[129] = { 0.0, 0.024541228522912288,
      0.049067674327418015, 0.073564563599667426, 0.0980171403295606,
      0.1224106751992162, 0.14673047445536175, 0.17096188876030122,
      0.19509032201612825, 0.2191012401568698, 0.24298017990326387,
      0.26671275747489837, 0.29028467725446233, 0.31368174039889152,
      0.33688985339222005, 0.35989503653498811, 0.38268343236508978,
      0.40524131400498986, 0.42755509343028208, 0.44961132965460654,
      0.47139673682599764, 0.49289819222978404, 0.51410274419322166,
      0.53499761988709715, 0.55557023301960218, 0.57580819141784534,
      0.59569930449243336, 0.61523159058062682, 0.63439328416364549,
      0.65317284295377676, 0.67155895484701833, 0.68954054473706683,
      0.70710678118654757, 0.724247082951467, 0.74095112535495922,
      0.75720884650648457, 0.773010453362737, 0.78834642762660634,
      0.80320753148064494, 0.81758481315158371, 0.83146961230254524,
      0.84485356524970712, 0.85772861000027212, 0.87008699110871146,
      0.881921264348355, 0.89322430119551532, 0.90398929312344334,
      0.91420975570353069, 0.92387953251128674, 0.932992798834739,
      0.94154406518302081, 0.94952818059303667, 0.95694033573220882,
      0.96377606579543984, 0.970031253194544, 0.97570213003852857,
      0.98078528040323043, 0.98527764238894122, 0.989176509964781,
      0.99247953459871, 0.99518472667219693, 0.99729045667869021,
      0.99879545620517241, 0.99969881869620425, 1.0, 0.99969881869620425,
      0.99879545620517241, 0.99729045667869021, 0.99518472667219693,
      0.99247953459871, 0.989176509964781, 0.98527764238894122,
      0.98078528040323043, 0.97570213003852857, 0.970031253194544,
      0.96377606579543984, 0.95694033573220882, 0.94952818059303667,
      0.94154406518302081, 0.932992798834739, 0.92387953251128674,
      0.91420975570353069, 0.90398929312344334, 0.89322430119551532,
      0.881921264348355, 0.87008699110871146, 0.85772861000027212,
      0.84485356524970712, 0.83146961230254524, 0.81758481315158371,
      0.80320753148064494, 0.78834642762660634, 0.773010453362737,
      0.75720884650648457, 0.74095112535495922, 0.724247082951467,
      0.70710678118654757, 0.68954054473706683, 0.67155895484701833,
      0.65317284295377676, 0.63439328416364549, 0.61523159058062682,
      0.59569930449243336, 0.57580819141784534, 0.55557023301960218,
      0.53499761988709715, 0.51410274419322166, 0.49289819222978404,
      0.47139673682599764, 0.44961132965460654, 0.42755509343028208,
      0.40524131400498986, 0.38268343236508978, 0.35989503653498811,
      0.33688985339222005, 0.31368174039889152, 0.29028467725446233,
      0.26671275747489837, 0.24298017990326387, 0.2191012401568698,
      0.19509032201612825, 0.17096188876030122, 0.14673047445536175,
      0.1224106751992162, 0.0980171403295606, 0.073564563599667426,
      0.049067674327418015, 0.024541228522912288, 0.0 };

    creal_T fv[256];
    creal_T fy[256];
    double d;
    double d1;
    double im;
    double temp_im;
    double temp_re;
    double twid_im;
    double twid_re;
    int i;
    int ihi;
    int istart;
    int ix;
    int j;
    int ju;
    int k;
    int temp_re_tmp;
    int xidx;
    boolean_T tst;
    xidx = 0;
    for (k = 0; k < 65; k++) {
      d = wwc[k + 64].re;
      d1 = wwc[k + 64].im;
      y[k].re = d * x[xidx].re + d1 * x[xidx].im;
      y[k].im = d * x[xidx].im - d1 * x[xidx].re;
      xidx++;
    }

    std::memset(&fy[0], 0, 256U * sizeof(creal_T));
    ix = 0;
    xidx = 0;
    ju = 0;
    for (i = 0; i < 64; i++) {
      fy[xidx] = y[ix];
      xidx = 256;
      tst = true;
      while (tst) {
        xidx >>= 1;
        ju ^= xidx;
        tst = ((ju & xidx) == 0);
      }

      xidx = ju;
      ix++;
    }

    fy[xidx] = y[ix];
    for (i = 0; i <= 254; i += 2) {
      d = fy[i + 1].re;
      temp_re = d;
      d1 = fy[i + 1].im;
      temp_im = d1;
      twid_re = fy[i].re;
      im = fy[i].im;
      d = twid_re - d;
      fy[i + 1].re = d;
      d1 = im - d1;
      fy[i + 1].im = d1;
      fy[i].re = twid_re + temp_re;
      fy[i].im = im + temp_im;
    }

    xidx = 2;
    ix = 4;
    k = 64;
    ju = 253;
    while (k > 0) {
      for (i = 0; i < ju; i += ix) {
        temp_re_tmp = i + xidx;
        temp_re = fy[temp_re_tmp].re;
        temp_im = fy[temp_re_tmp].im;
        fy[temp_re_tmp].re = fy[i].re - temp_re;
        fy[temp_re_tmp].im = fy[i].im - temp_im;
        fy[i].re += temp_re;
        fy[i].im += temp_im;
      }

      istart = 1;
      for (j = k; j < 128; j += k) {
        twid_re = dv[j];
        twid_im = dv1[j];
        i = istart;
        ihi = istart + ju;
        while (i < ihi) {
          temp_re_tmp = i + xidx;
          temp_re = twid_re * fy[temp_re_tmp].re - twid_im * fy[temp_re_tmp].im;
          temp_im = twid_re * fy[temp_re_tmp].im + twid_im * fy[temp_re_tmp].re;
          fy[temp_re_tmp].re = fy[i].re - temp_re;
          fy[temp_re_tmp].im = fy[i].im - temp_im;
          fy[i].re += temp_re;
          fy[i].im += temp_im;
          i += ix;
        }

        istart++;
      }

      k /= 2;
      xidx = ix;
      ix += ix;
      ju -= xidx;
    }

    std::memset(&fv[0], 0, 256U * sizeof(creal_T));
    ix = 0;
    xidx = 0;
    ju = 0;
    for (i = 0; i < 128; i++) {
      fv[xidx] = wwc[ix];
      xidx = 256;
      tst = true;
      while (tst) {
        xidx >>= 1;
        ju ^= xidx;
        tst = ((ju & xidx) == 0);
      }

      xidx = ju;
      ix++;
    }

    fv[xidx] = wwc[ix];
    for (i = 0; i <= 254; i += 2) {
      d = fv[i + 1].re;
      temp_re = d;
      d1 = fv[i + 1].im;
      temp_im = d1;
      twid_re = fv[i].re;
      im = fv[i].im;
      d = twid_re - d;
      fv[i + 1].re = d;
      d1 = im - d1;
      fv[i + 1].im = d1;
      fv[i].re = twid_re + temp_re;
      fv[i].im = im + temp_im;
    }

    xidx = 2;
    ix = 4;
    k = 64;
    ju = 253;
    while (k > 0) {
      for (i = 0; i < ju; i += ix) {
        temp_re_tmp = i + xidx;
        temp_re = fv[temp_re_tmp].re;
        temp_im = fv[temp_re_tmp].im;
        fv[temp_re_tmp].re = fv[i].re - temp_re;
        fv[temp_re_tmp].im = fv[i].im - temp_im;
        fv[i].re += temp_re;
        fv[i].im += temp_im;
      }

      istart = 1;
      for (j = k; j < 128; j += k) {
        twid_re = dv[j];
        twid_im = dv1[j];
        i = istart;
        ihi = istart + ju;
        while (i < ihi) {
          temp_re_tmp = i + xidx;
          temp_re = twid_re * fv[temp_re_tmp].re - twid_im * fv[temp_re_tmp].im;
          temp_im = twid_re * fv[temp_re_tmp].im + twid_im * fv[temp_re_tmp].re;
          fv[temp_re_tmp].re = fv[i].re - temp_re;
          fv[temp_re_tmp].im = fv[i].im - temp_im;
          fv[i].re += temp_re;
          fv[i].im += temp_im;
          i += ix;
        }

        istart++;
      }

      k /= 2;
      xidx = ix;
      ix += ix;
      ju -= xidx;
    }

    for (xidx = 0; xidx < 256; xidx++) {
      d = fy[xidx].re;
      d1 = fy[xidx].im;
      twid_re = fv[xidx].im;
      twid_im = fv[xidx].re;
      im = d * twid_re + d1 * twid_im;
      d = d * twid_im - d1 * twid_re;
      fy[xidx].re = d;
      fy[xidx].im = im;
    }

    ix = 0;
    xidx = 0;
    ju = 0;
    for (i = 0; i < 255; i++) {
      fv[xidx] = fy[ix];
      xidx = 256;
      tst = true;
      while (tst) {
        xidx >>= 1;
        ju ^= xidx;
        tst = ((ju & xidx) == 0);
      }

      xidx = ju;
      ix++;
    }

    fv[xidx] = fy[ix];
    for (i = 0; i <= 254; i += 2) {
      d = fv[i + 1].re;
      temp_re = d;
      d1 = fv[i + 1].im;
      temp_im = d1;
      twid_re = fv[i].re;
      im = fv[i].im;
      d = twid_re - d;
      fv[i + 1].re = d;
      d1 = im - d1;
      fv[i + 1].im = d1;
      fv[i].re = twid_re + temp_re;
      fv[i].im = im + temp_im;
    }

    xidx = 2;
    ix = 4;
    k = 64;
    ju = 253;
    while (k > 0) {
      for (i = 0; i < ju; i += ix) {
        temp_re_tmp = i + xidx;
        temp_re = fv[temp_re_tmp].re;
        temp_im = fv[temp_re_tmp].im;
        fv[temp_re_tmp].re = fv[i].re - temp_re;
        fv[temp_re_tmp].im = fv[i].im - temp_im;
        fv[i].re += temp_re;
        fv[i].im += temp_im;
      }

      istart = 1;
      for (j = k; j < 128; j += k) {
        twid_re = dv[j];
        twid_im = dv2[j];
        i = istart;
        ihi = istart + ju;
        while (i < ihi) {
          temp_re_tmp = i + xidx;
          temp_re = twid_re * fv[temp_re_tmp].re - twid_im * fv[temp_re_tmp].im;
          temp_im = twid_re * fv[temp_re_tmp].im + twid_im * fv[temp_re_tmp].re;
          fv[temp_re_tmp].re = fv[i].re - temp_re;
          fv[temp_re_tmp].im = fv[i].im - temp_im;
          fv[i].re += temp_re;
          fv[i].im += temp_im;
          i += ix;
        }

        istart++;
      }

      k /= 2;
      xidx = ix;
      ix += ix;
      ju -= xidx;
    }

    for (xidx = 0; xidx < 256; xidx++) {
      fv[xidx].re *= 0.00390625;
      fv[xidx].im *= 0.00390625;
    }

    xidx = 0;
    for (k = 0; k < 65; k++) {
      d = wwc[k + 64].re;
      d1 = wwc[k + 64].im;
      twid_re = fv[k + 64].re;
      twid_im = fv[k + 64].im;
      y[xidx].re = d * twid_re + d1 * twid_im;
      y[xidx].im = d * twid_im - d1 * twid_re;
      twid_re = y[xidx].re;
      twid_im = y[xidx].im;
      if (twid_im == 0.0) {
        twid_re /= 65.0;
        im = 0.0;
      } else if (twid_re == 0.0) {
        twid_re = 0.0;
        im = twid_im / 65.0;
      } else {
        twid_re /= 65.0;
        im = twid_im / 65.0;
      }

      y[xidx].re = twid_re;
      y[xidx].im = im;
      xidx++;
    }
  }

  void ifft(const ::coder::array<creal_T, 1U> &x, double varargin_1, ::coder::
            array<creal_T, 1U> &y)
  {
    array<creal_T, 1U> fv;
    array<creal_T, 1U> fy;
    array<creal_T, 1U> wwc;
    array<double, 2U> costab;
    array<double, 2U> costab1q;
    array<double, 2U> sintab;
    array<double, 2U> sintabinv;
    int N2blue;
    int nd2;
    int nfft;
    int rt;
    nfft = static_cast<int>(varargin_1);
    if ((x.size(0) == 0) || (0 == static_cast<int>(varargin_1))) {
      y.set_size((static_cast<int>(varargin_1)));
      nd2 = static_cast<int>(varargin_1);
      for (int i = 0; i < nd2; i++) {
        y[i].re = 0.0;
        y[i].im = 0.0;
      }
    } else {
      double nt_re;
      int i;
      int k;
      int nInt2;
      boolean_T useRadix2;
      useRadix2 = ((static_cast<int>(varargin_1) > 0) && ((static_cast<int>
        (varargin_1) & (static_cast<int>(varargin_1) - 1)) == 0));
      internal::FFTImplementationCallback::get_algo_sizes((static_cast<int>
        (varargin_1)), (useRadix2), (&N2blue), (&nd2));
      nt_re = 6.2831853071795862 / static_cast<double>(nd2);
      nInt2 = nd2 / 2 / 2;
      costab1q.set_size(1, (nInt2 + 1));
      costab1q[0] = 1.0;
      nd2 = nInt2 / 2 - 1;
      for (k = 0; k <= nd2; k++) {
        costab1q[k + 1] = std::cos(nt_re * (static_cast<double>(k) + 1.0));
      }

      i = nd2 + 2;
      nd2 = nInt2 - 1;
      for (k = i; k <= nd2; k++) {
        costab1q[k] = std::sin(nt_re * static_cast<double>(nInt2 - k));
      }

      costab1q[nInt2] = 0.0;
      if (!useRadix2) {
        nInt2 = costab1q.size(1) - 1;
        nd2 = (costab1q.size(1) - 1) << 1;
        costab.set_size(1, (nd2 + 1));
        sintab.set_size(1, (nd2 + 1));
        costab[0] = 1.0;
        sintab[0] = 0.0;
        sintabinv.set_size(1, (nd2 + 1));
        for (k = 0; k < nInt2; k++) {
          sintabinv[k + 1] = costab1q[(nInt2 - k) - 1];
        }

        i = costab1q.size(1);
        for (k = i; k <= nd2; k++) {
          sintabinv[k] = costab1q[k - nInt2];
        }

        for (k = 0; k < nInt2; k++) {
          costab[k + 1] = costab1q[k + 1];
          sintab[k + 1] = -costab1q[(nInt2 - k) - 1];
        }

        i = costab1q.size(1);
        for (k = i; k <= nd2; k++) {
          costab[k] = -costab1q[nd2 - k];
          sintab[k] = -costab1q[k - nInt2];
        }
      } else {
        nInt2 = costab1q.size(1) - 1;
        nd2 = (costab1q.size(1) - 1) << 1;
        costab.set_size(1, (nd2 + 1));
        sintab.set_size(1, (nd2 + 1));
        costab[0] = 1.0;
        sintab[0] = 0.0;
        for (k = 0; k < nInt2; k++) {
          costab[k + 1] = costab1q[k + 1];
          sintab[k + 1] = costab1q[(nInt2 - k) - 1];
        }

        i = costab1q.size(1);
        for (k = i; k <= nd2; k++) {
          costab[k] = -costab1q[nd2 - k];
          sintab[k] = costab1q[k - nInt2];
        }

        sintabinv.set_size(1, 0);
      }

      if (useRadix2) {
        internal::FFTImplementationCallback::r2br_r2dit_trig_impl((x), (
          static_cast<int>(varargin_1)), (costab), (sintab), (y));
        if (y.size(0) > 1) {
          nt_re = 1.0 / static_cast<double>(y.size(0));
          nd2 = y.size(0);
          for (i = 0; i < nd2; i++) {
            y[i].re = nt_re * y[i].re;
            y[i].im = nt_re * y[i].im;
          }
        }
      } else {
        double nt_im;
        int idx;
        nd2 = (static_cast<int>(varargin_1) + static_cast<int>(varargin_1)) - 1;
        wwc.set_size(nd2);
        idx = static_cast<int>(varargin_1);
        rt = 0;
        wwc[static_cast<int>(varargin_1) - 1].re = 1.0;
        wwc[static_cast<int>(varargin_1) - 1].im = 0.0;
        nInt2 = static_cast<int>(varargin_1) << 1;
        i = static_cast<int>(varargin_1);
        for (k = 0; k <= i - 2; k++) {
          int b_y;
          b_y = ((k + 1) << 1) - 1;
          if (nInt2 - rt <= b_y) {
            rt += b_y - nInt2;
          } else {
            rt += b_y;
          }

          nt_im = 3.1415926535897931 * static_cast<double>(rt) / static_cast<
            double>(static_cast<int>(varargin_1));
          if (nt_im == 0.0) {
            nt_re = 1.0;
            nt_im = 0.0;
          } else {
            nt_re = std::cos(nt_im);
            nt_im = std::sin(nt_im);
          }

          wwc[idx - 2].re = nt_re;
          wwc[idx - 2].im = -nt_im;
          idx--;
        }

        idx = 0;
        i = nd2 - 1;
        for (k = i; k >= nfft; k--) {
          wwc[k] = wwc[idx];
          idx++;
        }

        y.set_size((static_cast<int>(varargin_1)));
        if (static_cast<int>(varargin_1) > x.size(0)) {
          nd2 = static_cast<int>(varargin_1);
          y.set_size((static_cast<int>(varargin_1)));
          for (i = 0; i < nd2; i++) {
            y[i].re = 0.0;
            y[i].im = 0.0;
          }
        }

        nd2 = static_cast<int>(varargin_1);
        rt = x.size(0);
        if (nd2 < rt) {
          rt = nd2;
        }

        nd2 = 0;
        for (k = 0; k < rt; k++) {
          nInt2 = (static_cast<int>(varargin_1) + k) - 1;
          nt_re = wwc[nInt2].re;
          nt_im = wwc[nInt2].im;
          y[k].re = nt_re * x[nd2].re + nt_im * x[nd2].im;
          y[k].im = nt_re * x[nd2].im - nt_im * x[nd2].re;
          nd2++;
        }

        i = rt + 1;
        for (k = i; k <= nfft; k++) {
          y[k - 1].re = 0.0;
          y[k - 1].im = 0.0;
        }

        internal::FFTImplementationCallback::r2br_r2dit_trig_impl((y), (N2blue),
          (costab), (sintab), (fy));
        internal::FFTImplementationCallback::r2br_r2dit_trig_impl((wwc), (N2blue),
          (costab), (sintab), (fv));
        nd2 = fy.size(0);
        for (i = 0; i < nd2; i++) {
          nt_re = fy[i].re * fv[i].im + fy[i].im * fv[i].re;
          fy[i].re = fy[i].re * fv[i].re - fy[i].im * fv[i].im;
          fy[i].im = nt_re;
        }

        internal::FFTImplementationCallback::r2br_r2dit_trig_impl((fy), (N2blue),
          (costab), (sintabinv), (fv));
        if (fv.size(0) > 1) {
          nt_re = 1.0 / static_cast<double>(fv.size(0));
          nd2 = fv.size(0);
          for (i = 0; i < nd2; i++) {
            fv[i].re = nt_re * fv[i].re;
            fv[i].im = nt_re * fv[i].im;
          }
        }

        idx = 0;
        i = static_cast<int>(varargin_1);
        nd2 = wwc.size(0);
        for (k = i; k <= nd2; k++) {
          double ai;
          y[idx].re = wwc[k - 1].re * fv[k - 1].re + wwc[k - 1].im * fv[k - 1].
            im;
          y[idx].im = wwc[k - 1].re * fv[k - 1].im - wwc[k - 1].im * fv[k - 1].
            re;
          nt_re = y[idx].re;
          ai = y[idx].im;
          if (ai == 0.0) {
            nt_im = nt_re / static_cast<double>(static_cast<int>(varargin_1));
            nt_re = 0.0;
          } else if (nt_re == 0.0) {
            nt_im = 0.0;
            nt_re = ai / static_cast<double>(static_cast<int>(varargin_1));
          } else {
            nt_im = nt_re / static_cast<double>(static_cast<int>(varargin_1));
            nt_re = ai / static_cast<double>(static_cast<int>(varargin_1));
          }

          y[idx].re = nt_im;
          y[idx].im = nt_re;
          idx++;
        }
      }
    }
  }
}

// End of code generation (ifft.cpp)
